/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package pt.pak3nuh.util.logviewer

import pt.pak3nuh.util.logviewer.file.NotifierExecutors
import pt.pak3nuh.util.logviewer.properties.LOG_LEVEL_PROPERTY
import pt.pak3nuh.util.logviewer.properties.THREAD_NUMBER_PROPERTY
import pt.pak3nuh.util.logviewer.util.LogLevel
import pt.pak3nuh.util.logviewer.util.Logger
import pt.pak3nuh.util.logviewer.view.MainView
import tornadofx.App
import tornadofx.launch

private val logger = Logger.createLogger<LogViewerApp>()

class LogViewerApp : App(MainView::class)

fun main(args: Array<String>) {
    configureLogging(System.getProperty(LOG_LEVEL_PROPERTY))
    configureThreads(System.getProperty(THREAD_NUMBER_PROPERTY))
    launch<LogViewerApp>(args)
}

fun configureThreads(threadProperty: String?) {
    logger.debug("Threading property value: %s", threadProperty)
    val propValue = threadProperty?.toIntOrNull()
    if (propValue != null) {
        NotifierExecutors.numberOfThreads = propValue
    }
}

fun configureLogging(loggingLevel: String?) {
    logger.info("Threading property value: %s", loggingLevel)
    val propValue = loggingLevel?.toIntOrNull()
    if (propValue != null) {
        val logValues = LogLevel.values()
        if(propValue < logValues.size) {
            val newLevel = logValues[propValue]
            logger.info("Setting log level to $newLevel")
            Logger.level = newLevel
            return
        }
        logger.error("Invalid value, ignoring")
    }
}
